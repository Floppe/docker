<source>
  @type beats
  tag "beats.collect"
  @label @beats
</source>

<label @beats>

  ### Reform for tag routing
  <match beats.collect>
    @type record_reformer
    tag ${fields['tagtype']}.${fields['tagapps']}.${fields['taghost']}
  </match>

  ### For Parse

  # syslog
  <filter linux.syslog.*>
    @type parser
    key_name message
    #format syslog
    #format /^(?<time>[^ ]*\s*[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[^\[]*)\[(?<pid>[^\]]*)\]:(?<message>[\s\S]*)/
    format /^(?<time>[^ ]*\s*[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[^\[]*)(\[(?<pid>[^\]]*)\])?:(?<message>[\s\S]*)/
    time_format %b %d %H:%M:%S
    reserve_data yes
  </filter>

  # Shorewall
  <filter linux.shorewall.*>
    @type parser
    key_name message
    format /^(?<time>[^ ]*\s*[^ ]* [^ ]*) (?<hostname>[^ ]*) (?<flow.zones>[^ ]*) (?<action>[^ ]*)([ ]*)IN=(?<flow.input_ifname>[^ ]*)([ ]*)OUT=(?<flow.output_ifname>[^ ]*)([ ]*)MAC=((?<flow.dst_mac>((([0-9a-f]){2}:?){6})):(?<flow.src_mac>((([0-9a-f]){2}:?){6})):(?<flow.ether_frame>((([0-9a-f]){2}:?){2}))*)?([ ]*)SRC=(?<flow.src_addr>[^ ]*)([ ]*)DST=(?<flow.dst_addr>[^ ]*)([ ]*)LEN=(?<flow.len>[^ ]*)([ ]*)TOS=(?<flow.tos>[^ ]*)([ ]*)PREC=(?<flow.pref>[^ ]*)([ ]*)TTL=(?<flow.ttl>[^ ]*)([ ]*)ID=(?<flow.packet_id>[^ ]*)([ ]*)(DF)?([ ]*)PROTO=(?<flow.proto>[^ ]*)([ ]*)(SPT=(?<flow.src_port>[^ ]*)([ ]*))?(DPT=(?<flow.dst_port>[^ ]*)([ ]*))?(TYPE=(?<flow.type>[^ ]*)([ ]*))?(CODE=(?<flow.code>[^ ]*)([ ]*))?(ID=([^ ]*)([ ]*))?(SEQ=(?<flow.packet_seq>[^ ]*))?(([ ]*)ACK=(?<flow.packet_ack>[^ ]*))?/
    time_format %b %d %H:%M:%S
    reserve_data yes
  </filter>

  <filter linux.shorewall.*>
    @type geoip
    geoip_database "/var/lib/libmaxminddb/GeoLite2-City.mmdb"
    backend_library geoip2_c
    geoip_lookup_keys flow.src_addr
    <record>
      flow.src_latitude		${location.latitude["flow.src_addr"]}
      flow.src_longitude	${location.longitude["flow.src_addr"]}
      flow.src_geo_location	'{ "lat" : ${location.latitude["flow.src_addr"]}, "lon" : ${location.longitude["flow.src_addr"]} }'
      flow.src_country_code	${country.iso_code["flow.src_addr"]}
      flow.src_country		${country.names.en["flow.src_addr"]}
      flow.src_city		${city.names.en["flow.src_addr"]}
    </record>

    skip_adding_null_record true
    @log_level debug
  </filter>

  <filter linux.shorewall.*>
    @type geoip
    geoip_database "/var/lib/libmaxminddb/GeoLite2-City.mmdb"
    backend_library geoip2_c
    geoip_lookup_keys flow.dst_addr
    <record>
      flow.dst_latitude		${location.latitude["flow.dst_addr"]}
      flow.dst_longitude	${location.longitude["flow.dst_addr"]}
      flow.dst_geo_location	'{ "lat" : ${location.latitude["flow.dst_addr"]}, "lon" : ${location.longitude["flow.dst_addr"]} }'
      flow.dst_country_code	${country.iso_code["flow.dst_addr"]}
      flow.dst_country		${country.names.en["flow.dst_addr"]}
      flow.dst_city		${city.names.en["flow.dst_addr"]}
    </record>

    skip_adding_null_record true
    @log_level debug
  </filter>

  # Mirth
  <filter linux.mirth.*>
    @type parser
    key_name message
    time_key time
    time_format %Y-%m-%d %H:%M:%S,%N
    keep_time_key true
    format /^(?<level>[^ ]*)([ ])*(?<time>[^ ]*\s*[^ ]*) \[.* on (?<channel.name>[^\(]*)([ ]*)?\((?<channel.id>[^\)]*)\)[^\]]*\]([ ]*)(?<channel.connector>[^:]*)/
    reserve_data yes
  </filter>

  # IIS W3C Access logs
  # 
  # Fields: date time s-ip cs-method cs-uri-stem cs-uri-query s-port cs-username c-ip cs(User-Agent) cs(Referer) sc-status sc-substatus sc-win32-status time-taken
  <filter windows.iis-access.*>
    @type parser
    key_name message
    format /^(?<time>[^ ]+ [^ ]+) (?<s_ip>[^ ]*) (?<cs_method>[^ ]*) (?<cs_uri_stem>[^ ]*) (?<cs_uri_query>[^ ]*) (?<s_port>[^ ]*) (?<user>[^ ]*) (?<c_ip>[^ ]*) (?<cs_user_agent>[^ ]*) (?<sc_referer>[^ ]*) (?<sc_status>[^ ]*) (?<sc_substatus>[^ ]*) (?<sc_win32_status>[^ ]*) (?<time_taken>[^ ]*)/
    time_format "%Y-%m-%d %H:%M:%S"
    time_key time
    time_type string
    keep_time_key true
    reserve_data yes
  </filter>

  # add new records
  <filter windows.iis-access.*>
    @type record_transformer
    enable_ruby 
    <record>
      application ${record["cs_uri_stem"].scan(/\/([^\/]*)\/.*/).join('')}
      application_pool ${record["source"].scan(/c:\\inetpub\\logs\\LogFiles\\([^\\]*)\\/).join('')}
    </record>
  </filter>

  # IIS / Windows httperr
  #Fields: date time c-ip c-port s-ip s-port cs-version cs-method cs-uri streamid sc-status s-siteid s-reason s-queuename
  <filter windows.httperr.*>
    @type parser
    key_name message
    #format /^(?<time>[^ ]+ [^ ]+) (?<c_ip>[^ ]*) (?<c_port>[^ ]*) (?<s_ip>[^ ]*) (?<s_port>[^ ]*) (?<cs_version>[^ ]*) (?<cs_method>[^ ]*) (?<cs_uri>[^ ]*) (?<streamid>[^ ]*) (?<sc_status>[^ ]*) (?<s_siteid>[^ ]*) (?<s_reason>[^ ]*) (?<s_queuename>[^ ]*)/
    #format /^(?<time>[^ ]+ [^ ]+) (?<c_ip>[^ ]*) (?<c_port>[^ ]*) (?<s_ip>[^ ]*) (?<s_port>[^ ]*) (?:(?:-)|(?<cs_version>[^ ]*)) (?<cs_method>[^ ]*) (?<cs_uri>[^ ]*) (?:(?:-)|(?<streamid>[^ ]*)) (?:(?:-)|(?<cs_status>[^ ]*)) (?:(?:-)|(?<s_siteid>[^ ]*)) (?<s_reason>[^ ]*) (?<s_queuename>[^ ]*)/ 
    format /^(?<time>[^ ]+ [^ ]+) (?<c_ip>[^ ]*) (?<c_port>[^ ]*) (?<s_ip>[^ ]*) (?<s_port>[^ ]*) (?:(?:-)|(?<cs_version>[^ ]*)) (?:(?:-)|(?<cs_method>[^ ]*)) (?:(?:-)|(?<cs_uri>[^ ]*)) (?:(?:-)|(?<streamid>[^ ]*)) (?:(?:-)|(?<sc_status>[^ ]*)) (?:(?:-)|(?<s_siteid>[^ ]*)) (?<s_reason>[^ ]*) (?:(?:-)|(?<s_queuename>[^ ]*))/
    time_format "%Y-%m-%d %H:%M:%S"
    time_key time
    time_type string
    keep_time_key true
    reserve_data yes
  </filter>

  ### General match
  <match *.*.*>
    @type forest
    subtype copy
    <template>
      <store>
        @type elasticsearch
        host elasticsearch
        port 9200
        logstash_format true
        logstash_prefix ${tag_parts[0]}.${tag_parts[1]}
        type_name ${tag_parts[0]}
        flush_interval 10s
      </store>
      <store>
        @type file
        path /fluentd/log/${tag_parts[0]}/${tag_parts[1]}_${tag_parts[2]}.*.log
        symlink_path /fluentd/log/${tag_parts[0]}/${tag_parts[1]}_${tag_parts[2]}.log
        append true
        time_slice_format %Y%m%d
        time_slice_wait 10m
        time_format %Y%m%dT%H%M%S%z
        time_key timestamp
      </store>
    </template>
  </match>
</label>
